import { AppBar, Toolbar, Typography, IconButton, Container, Avatar, Menu, MenuItem, Tooltip, Grid } from '@mui/material';
import React from 'react';
import styled from 'styled-components';
const useStyles = makeStyles((theme) => ({
  logo: {
    display: { xs: 'none', md: 'flex' },
    mr: 1,
    width: '200px',
    height: '70px',
    borderRadius: '10px',
    marginRight: 0
  },
  logoMobile: {
    display: { xs: 'flex', md: 'none' },
    mr: 1
  },
  title: {
    mr: 2,
    display: { xs: 'flex', md: 'none' },
    flexGrow: 1,
    fontFamily: 'monospace',
    fontWeight: 700,
    letterSpacing: '.3rem',
    color: 'inherit',
    textDecoration: 'none',
  },
  menuButton: {
    display: { xs: 'block', md: 'none' },
    mr: 1
  }
}));

const menuItems = [
  { label: 'Sobre mi', section: 'sobre mi' },
  { label: 'Servicios', section: 'servicios' },
  { label: 'Turnos', section: 'turnos' },
  { label: 'Productos', section: 'productos' },
];

const Navbar: React.FC = () => {
  const classes = useStyles();
  const [anchorElNav, setAnchorElNav] = React.useState<null | HTMLElement>(null);
  const [anchorElUser, setAnchorElUser] = React.useState<null | HTMLElement>(null);
  const [activeSetting, setActiveSetting] = React.useState('');

  const handleOpenNavMenu = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorElNav(event.currentTarget);
  };
  const handleOpenUserMenu = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorElUser(event.currentTarget);
  };

  const handleCloseNavMenu = () => {
    setAnchorElNav(null);
  };

  const handleCloseUserMenu = () => {
    setAnchorElUser(null);
  };

  const handleSettingClick = (setting: string) => {
    setActiveSetting(setting);
    handleCloseUserMenu();
  };

  const StyledMenuItem = styled(MenuItem)`
    text-align: center;
  `;

  return (
    <AppBar position="sticky">
      <Container maxWidth="xl" >
        <Toolbar disableGutters>
          <Avatar alt="logo" src={logo} variant='square' className={classes.logo} />
          <Box sx={{ flexGrow: 1 }}>
            <IconButton
              size="large"
              aria-label="account of current user"
              aria-controls="menu-appbar"
              aria-haspopup="true"
              onClick={handleOpenNavMenu}
              color="inherit"
              className={classes.menuButton}
            >
              <MenuIcon />
            </IconButton>
            <Menu
              id="menu-appbar"
              anchorEl={anchorElNav}
              anchorOrigin={{
                vertical: 'bottom',
                horizontal: 'left',
              }}
              keepMounted
              transformOrigin={{
                vertical: 'top',
                horizontal: 'left',
              }}
              open={Boolean(anchorElNav)}
              onClose={handleCloseNavMenu}
              sx={{
                display: { xs: 'block', md: 'none' },
              }}
            >
              {menuItems.map((menuItem) => (
                <StyledMenuItem key={menuItem.label} onClick={handleCloseNavMenu}>
                  <Typography>{menuItem.label}</Typography>
                </StyledMenuItem>
              ))}
            </Menu>
          </Box>
          <Avatar alt="logo" src={logo} sx={{ display: { xs: 'flex', md: 'none' }, mr: 1 }} className={classes.logoMobile} />
          <Typography
            variant="h5"
            noWrap
            component="a"
            href=""
            className={classes.title}
          >
            ANGEL ORONA
          </Typography>
          <Grid item xs={12} md={6} sx={{ display: { xs: 'none', md: 'flex' }, justifyContent: "flex-end" }}>
            {menuItems.map((menuItem) => (
              <Link
                key={menuItem.label}
                to={menuItem.section}
                smooth={true}
                duration={500}
                offset={-70}
              >
                <Button
                  onClick={handleCloseNavMenu}
                  sx={{ my: 2, color: 'white', display: 'block' }}
                >
                  {menuItem.label}
                </Button>
              </Link>
            ))}
          </Grid>
          <Box sx={{ flexGrow: 0 }}>
            <Tooltip title="Open settings">
              <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>
                <Avatar alt="Remy Sharp" src="/static/images/avatar/2.jpg" />
              </IconButton>
            </Tooltip>
            <UserMenu anchorEl={anchorElUser} onClose={handleCloseUserMenu} handleSettingClick={handleSettingClick} />
          </Box>
        </Toolbar>
      </Container>
      {activeSetting && <RenderSettingComponent setting={activeSetting} />}
    </AppBar>
  );
};

const UserMenu: React.FC<{ anchorEl: HTMLElement | null, onClose: () => void, handleSettingClick: (setting: string) => void }> = ({ anchorEl, onClose, handleSettingClick }) => {
  const open = Boolean(anchorEl);

  const handleSettingItemClick = (setting: string) => {
    handleSettingClick(setting);
    onClose();
  };

  return (
    <Menu
      id="menu-appbar"
      anchorEl={anchorEl}
      anchorOrigin={{
        vertical: 'bottom',
        horizontal: 'right',
      }}
      keepMounted
      transformOrigin={{
        vertical: 'top',
        horizontal: 'right',
      }}
      open={open}
      onClose={onClose}
    >
      {settings.map((setting) => (
        <MenuItem key={setting.label} onClick={() => handleSettingItemClick(setting.label)}>
          <Typography>{setting.label}</Typography>
        </MenuItem>
      ))}
    </Menu>
  );
};

export default Navbar;